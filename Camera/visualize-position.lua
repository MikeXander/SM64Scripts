-- Script by: Frame (Dec 2022)
-- This script will render an object at the given coordinates
-- Side note from Xander: using the render camera position crashes?

-- 0x74 = Yellow coin
-- 0x76 = Blue coin
local trackData = {
	{
		-- Camera Focus, switching between U and J addresses as appropriate 
		x = {U = 0x8033C698, J = 0x8033B328},
		y = {U = 0x8033C69C, J = 0x8033B32C},
		z = {U = 0x8033C6A0, J = 0x8033B330},
		model_id = 0x76
	}--[[,
	{
		-- Camera previous Focus, only U addresses, so will only work correctly on U
		x = 0x8033C578,
		y = 0x8033C57C,
		z = 0x8033C580,
		model_id = 0x76
	}]]
}


-- detect the ROM for appropriate pointers
local ROM_list = {
	addr = 0x802F0000,
	U = 0xC58400A4,
	J = 0x27BD0020
}

local ROM = memory.readdword(ROM_list.addr)

if ROM == ROM_list.U then
	ROM = "U"
	print("U ROM detected")
elseif ROM == ROM_list.J then
	ROM = "J"
	print("J ROM detected")
else
	ROM = nil
	print("Error: ROM must be U or J")
end

-- area_update_objects
local hookAddr = { U = 0x8027B164, J = 0x8027abb4, offset = 0x24 }
local noHookValue = 0x10000001 -- usually BEQ R0, R0, $(+8)

-- address of the main loop, needs ~0x200 bytes of space
local loopCodeAddr = 0x80400000

-- address of the objectNodeList; Appends object nodes backwards when needed; takes up 0x8 + (0x68 * num_objects) bytes
local objectNodeListAddr = 0x80402000

-- address of the data
local dataAddr = loopCodeAddr + 0x200

local function hi1(addr) return addr >> 0x18 end
local function hi2(addr) return (addr & 0xFF0000) >> 0x10 end
local function lo1(addr) return (addr & 0xFF00) >> 0x8 end
local function lo2(addr) return addr & 0xFF end

local loopCode = {
	U = {
		0x27, 0xBD, 0xFF, 0xC0, 0x3C, 0x08, 0x80, 0x36, 0x8D, 0x08, 0x11, 0x58, 0x11, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0xAF, 0xBF, 0x00, 0x34, 0xAF, 0xB3, 0x00, 0x30, 0xAF, 0xB2, 0x00, 0x2C, 0xAF, 0xB1, 0x00, 0x28, 0xAF, 0xB0, 0x00, 0x24, 0xAF, 0xB4, 0x00, 0x20, 0x3C, 0x08, 0x80, 0x36, 0x8D, 0x14, 0x11, 0x58, 0x86, 0x88, 0x00, 0x02, 0x31, 0x09, 0x00, 0x40, 0x15, 0x20, 0x00, 0x05, 0x35, 0x09, 0x00, 0x40, 0xA6, 0x89, 0x00, 0x02, 0x3C, 0x11, 0x80, 0x40, 0x10, 0x00, 0x00, 0x3F, 0x36, 0x31, 0x7F, 0xF8, 0x34, 0x10, 0x00, 0x00, 0x3C, 0x11, 0x80, 0x40, 0x36, 0x31, 0x7F, 0xF8, 0x3C, 0x01, 0x80, 0x40, 0x80, 0x21, 0x7F, 0xFF, 0x10, 0x20, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x15, 0x00, 0x00, 0x0D, 0x34, 0x04, 0x00, 0x00, 0x26, 0x25, 0xFF, 0x9C, 0x00, 0x00, 0x30, 0x25, 0x3C, 0x07, 0x80, 0x38, 0x34, 0xE1, 0x5F, 0xDC, 0xAF, 0xA1, 0x00, 0x10, 0x34, 0xE1, 0x5F, 0xE4, 0xAF, 0xA1, 0x00, 0x14, 0x0C, 0x0D, 0xEE, 0x78, 0x34, 0xE7, 0x5F, 0xD0, 0xAE, 0x22, 0x00, 0x00, 0x8E, 0x84, 0x00, 0x0C, 0x0C, 0x0D, 0xF0, 0x11, 0x00, 0x40, 0x28, 0x25, 0x8E, 0x32, 0x00, 0x00, 0x82, 0x89, 0x00, 0x18, 0xA2, 0x49, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x41, 0x00, 0x3C, 0x01, 0x80, 0x40, 0x34, 0x21, 0x82, 0x00, 0x01, 0x01, 0x40, 0x21, 0x8D, 0x09, 0x00, 0x00, 0x8D, 0x2A, 0x00, 0x00, 0xAE, 0x4A, 0x00, 0x20, 0x8D, 0x09, 0x00, 0x04, 0x8D, 0x2A, 0x00, 0x00, 0xAE, 0x4A, 0x00, 0x24, 0x8D, 0x09, 0x00, 0x08, 0x8D, 0x2A, 0x00, 0x00, 0xAE, 0x4A, 0x00, 0x28, 0x3C, 0x01, 0x80, 0x34, 0x81, 0x09, 0x00, 0x0F, 0x00, 0x09, 0x48, 0x80, 0x00, 0x29, 0x08, 0x21, 0x8C, 0x2A, 0xB4, 0xD0, 0xAE, 0x4A, 0x00, 0x14, 0x86, 0x4A, 0x00, 0x02, 0x35, 0x4A, 0x00, 0x04, 0xA6, 0x4A, 0x00, 0x02, 0x26, 0x10, 0x00, 0x01, 0x26, 0x31, 0xFF, 0x98, 0x3C, 0x01, 0x80, 0x40, 0x80, 0x21, 0x7F, 0xFF, 0x02, 0x01, 0x40, 0x2B, 0x15, 0x00, 0xFF, 0xD0, 0xA2, 0x50, 0x00, 0x60, 0x8E, 0x32, 0x00, 0x00, 0x12, 0x40, 0x00, 0x07, 0x00, 0x12, 0x20, 0x25, 0x0C, 0x0D, 0xF0, 0x2F, 0xAE, 0x20, 0x00, 0x00, 0x26, 0x31, 0xFF, 0x98, 0x8E, 0x24, 0x00, 0x00, 0x14, 0x80, 0xFF, 0xFB, 0x8F, 0xB4, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xB0, 0x00, 0x24, 0x8F, 0xB1, 0x00, 0x28, 0x8F, 0xB2, 0x00, 0x2C, 0x8F, 0xB3, 0x00, 0x30, 0x8F, 0xBF, 0x00, 0x34, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x40
	},
	J = {
		0x27, 0xBD, 0xFF, 0xC0, 0x3C, 0x08, 0x80, 0x36, 0x8D, 0x08, 0xFD, 0xE8, 0x11, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0xAF, 0xBF, 0x00, 0x34, 0xAF, 0xB3, 0x00, 0x30, 0xAF, 0xB2, 0x00, 0x2C, 0xAF, 0xB1, 0x00, 0x28, 0xAF, 0xB0, 0x00, 0x24, 0xAF, 0xB4, 0x00, 0x20, 0x3C, 0x08, 0x80, 0x36, 0x8D, 0x14, 0xFD, 0xE8, 0x86, 0x88, 0x00, 0x02, 0x31, 0x09, 0x00, 0x40, 0x15, 0x20, 0x00, 0x05, 0x35, 0x09, 0x00, 0x40, 0xA6, 0x89, 0x00, 0x02, 0x3C, 0x11, 0x80, 0x40, 0x10, 0x00, 0x00, 0x3F, 0x36, 0x31, 0x7F, 0xF8, 0x34, 0x10, 0x00, 0x00, 0x3C, 0x11, 0x80, 0x40, 0x36, 0x31, 0x7F, 0xF8, 0x3C, 0x01, 0x80, 0x40, 0x80, 0x21, 0x7F, 0xFF, 0x10, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x15, 0x00, 0x00, 0x0D, 0x34, 0x04, 0x00, 0x00, 0x26, 0x25, 0xFF, 0x9C, 0x00, 0x00, 0x30, 0x25, 0x3C, 0x07, 0x80, 0x38, 0x34, 0xE1, 0x5F, 0xDC, 0xAF, 0xA1, 0x00, 0x10, 0x34, 0xE1, 0x5F, 0xE4, 0xAF, 0xA1, 0x00, 0x14, 0x0C, 0x0D, 0xEE, 0x78, 0x34, 0xE7, 0x5F, 0xD0, 0xAE, 0x22, 0x00, 0x00, 0x8E, 0x84, 0x00, 0x0C, 0x0C, 0x0D, 0xF0, 0x11, 0x00, 0x40, 0x28, 0x25, 0x8E, 0x32, 0x00, 0x00, 0x82, 0x89, 0x00, 0x18, 0xA2, 0x49, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x41, 0x00, 0x3C, 0x01, 0x80, 0x40, 0x34, 0x21, 0x82, 0x00, 0x01, 0x01, 0x40, 0x21, 0x8D, 0x09, 0x00, 0x00, 0x8D, 0x2A, 0x00, 0x00, 0xAE, 0x4A, 0x00, 0x20, 0x8D, 0x09, 0x00, 0x04, 0x8D, 0x2A, 0x00, 0x00, 0xAE, 0x4A, 0x00, 0x24, 0x8D, 0x09, 0x00, 0x08, 0x8D, 0x2A, 0x00, 0x00, 0xAE, 0x4A, 0x00, 0x28, 0x3C, 0x01, 0x80, 0x34, 0x81, 0x09, 0x00, 0x0F, 0x00, 0x09, 0x48, 0x80, 0x00, 0x29, 0x08, 0x21, 0x8C, 0x2A, 0xA1, 0x60, 0xAE, 0x4A, 0x00, 0x14, 0x86, 0x4A, 0x00, 0x02, 0x35, 0x4A, 0x00, 0x04, 0xA6, 0x4A, 0x00, 0x02, 0x26, 0x10, 0x00, 0x01, 0x26, 0x31, 0xFF, 0x98, 0x3C, 0x01, 0x80, 0x40, 0x80, 0x21, 0x7F, 0xFF, 0x02, 0x01, 0x40, 0x2B, 0x15, 0x00, 0xFF, 0xD0, 0xA2, 0x50, 0x00, 0x60, 0x8E, 0x32, 0x00, 0x00, 0x12, 0x40, 0x00, 0x07, 0x00, 0x12, 0x20, 0x25, 0x0C, 0x0D, 0xF0, 0x2F, 0xAE, 0x20, 0x00, 0x00, 0x26, 0x31, 0xFF, 0x98, 0x8E, 0x24, 0x00, 0x00, 0x14, 0x80, 0xFF, 0xFB, 0x8F, 0xB4, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xB0, 0x00, 0x24, 0x8F, 0xB1, 0x00, 0x28, 0x8F, 0xB2, 0x00, 0x2C, 0x8F, 0xB3, 0x00, 0x30, 0x8F, 0xBF, 0x00, 0x34, 0x03, 0xE0, 0x00, 0x08, 0x27, 0xBD, 0x00, 0x40
	}
}

local hack = {
	{
		location = hookAddr[ROM] + hookAddr.offset,
		data = {
			0x0C, hi2(loopCodeAddr >> 2), lo1(loopCodeAddr >> 2), lo2(loopCodeAddr >> 2)
		}
	},
	{
		location = loopCodeAddr,
		data = loopCode[ROM]
	},

	-- code modifications to make the hack movable
	{
	 	--LUI AT, $(dataAddr_hi); ORI AT, $(dataAddr_lo)
	 	location = loopCodeAddr + 0xC6,
	 	data = { hi1(dataAddr), hi2(dataAddr), 0x34, 0x21, lo1(dataAddr), lo2(dataAddr) }
	},
	{
		--LUI S1, $((objectNodeListAddr-8)_hi); BEQ R0, R0, 0x14C; ORI S1, S1, $((objectNodeListAddr-8)_lo)
		location = loopCodeAddr + 0x4A,
		data = { hi1(objectNodeListAddr-8), hi2(objectNodeListAddr-8), 0x10, 0x00, 0x00, 0x3F, 0x36, 0x31, lo1(objectNodeListAddr-8), lo2(objectNodeListAddr-8) }
	},
	{
		--LUI S1, $((objectNodeListAddr-8)_hi); ORI S1, S1, $((objectNodeListAddr-8)_lo)
		--LUI AT, $((objectNodeListAddr-1)_hi); LB AT, $((objectNodeListAddr-1)_lo) (AT)
		location = loopCodeAddr + 0x5E,
		data = { 
			hi1(objectNodeListAddr-8), hi2(objectNodeListAddr-8), 0x36, 0x31, lo1(objectNodeListAddr-8), lo2(objectNodeListAddr-8),
			0x3C, 0x01, hi1(objectNodeListAddr-1), hi2(objectNodeListAddr-1), 0x80, 0x21, lo1(objectNodeListAddr-1), lo2(objectNodeListAddr-1)
	 	}
	},
	{
		--LUI AT, $((objectNodeListAddr-1)_hi); LB AT, $((objectNodeListAddr-1)_lo) (AT)
		location = loopCodeAddr + 0x122,
		data = { hi1(objectNodeListAddr-1), hi2(objectNodeListAddr-1), 0x80, 0x21, lo1(objectNodeListAddr-1), lo2(objectNodeListAddr-1)	}
	}
}

local function run()
	local existingHook = memory.readdword(hookAddr[ROM] + hookAddr.offset)

	for k, v in pairs(hack) do
		local addr = v.location
		for i = 1, #v.data, 1 do
			memory.writebyte(addr, v.data[i])
			addr = addr + 1
		end
	end

	-- ensure anything hooked to our chosen hook point is executed afterwards
	if (existingHook ~= noHookValue and (existingHook & 0xFFFFFF) ~= (loopCodeAddr & 0xFFFFFF) >> 2) then
		print(string.format("Restored hook %x", existingHook))
		memory.writedword(loopCodeAddr + 0x158, existingHook)
	end

	memory.recompilenextall()

	local function switchvalue(v) 
		if (type(v) == "table") then
			return v[ROM]
		else
			return v
		end
	end

	memory.writebyte(objectNodeListAddr-1, #trackData)
	for i = 1, #trackData, 1 do
		local addr = dataAddr + 0x10 * (i-1)
		memory.writedword(addr + 0x0, switchvalue(trackData[i].x))
		memory.writedword(addr + 0x4, switchvalue(trackData[i].y))
		memory.writedword(addr + 0x8, switchvalue(trackData[i].z))
		memory.writebyte(addr + 0xF, switchvalue(trackData[i].model_id))
	end 
end

-- make objects invisible when stopping (I'm bad at unloading them lol)
-- if you do this too many times, you can might be able to crash the game
emu.atstop(function() 
	for i = 1, #trackData, 1 do
		local addr = dataAddr + 0x10 * (i-1)
		memory.writebyte(addr + 0xF, 0)
	end
end)

run()